name: Update meme in README

on:
  workflow_dispatch:
  schedule:
    - cron: "0 13 * * *"  # 13:00 UTC daily (09:00 New York)

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Run updater
        env:
          URL: "https://www.reddit.com/r/ProgrammerHumor/top.json?t=day&limit=25"
          UA: "github.com/lawrence-readme-updater (contact: none)"
        run: |
          python - << 'PY'
          import json, re, urllib.request, sys, html, time, os

          URL = os.getenv("URL")
          UA  = os.getenv("UA")
          README = "README.md"

          def fetch():
            for attempt in range(3):
              try:
                req = urllib.request.Request(URL, headers={"User-Agent": UA})
                with urllib.request.urlopen(req, timeout=20) as r:
                  data = r.read()
                  return json.loads(data.decode("utf-8"))
              except Exception as e:
                print(f"[updater] fetch attempt {attempt+1} failed: {e}")
                time.sleep(2)
            return None

          def pick_post(data):
            if not data: return None
            for child in data.get("data",{}).get("children",[]):
              p = child.get("data",{})
              if p.get("over_18") or p.get("stickied"):  # skip NSFW/stickied
                continue
              title = p.get("title","(no title)")
              permalink = p.get("permalink","#")
              url = p.get("url_overridden_by_dest") or p.get("url") or ""
              hint = p.get("post_hint","")
              if hint == "image" and url.lower().endswith((".png",".jpg",".jpeg",".gif")):
                return {"title": title,
                        "permalink": f"https://www.reddit.com{permalink}",
                        "image": url}
              if "preview" in p and p["preview"].get("images"):
                img = p["preview"]["images"][0]["source"]["url"]
                img = html.unescape(img).replace("&amp;", "&")
                return {"title": title,
                        "permalink": f"https://www.reddit.com{permalink}",
                        "image": img}
            return None

          def update_readme(memeblock):
            try:
              with open(README, "r", encoding="utf-8") as f:
                content = f.read()
            except FileNotFoundError:
              print("[updater] README.md not found; nothing to do")
              return False

            start = "<!-- START_MEME -->"
            end   = "<!-- END_MEME -->"
            pattern = re.compile(re.escape(start) + r".*?" + re.escape(end), re.DOTALL)

            new_block = (
              f"{start}\n"
              f"The top voted meme for today is...\n\n"
              f"[*{memeblock['title']}*]({memeblock['permalink']})\n\n"
              f"![ProgrammerHumor Meme of the Day]({memeblock['image']})\n"
              f"{end}"
            )

            if not pattern.search(content):
              print("[updater] Markers not found; leaving README unchanged.")
              return False

            updated = pattern.sub(new_block, content)
            if updated == content:
              print("[updater] No change.")
              return False

            with open(README, "w", encoding="utf-8") as f:
              f.write(updated)
            print("[updater] README updated.")
            return True

          data = fetch()
          post = pick_post(data) or {
            "title": "Could not fetch a meme today ðŸ˜…",
            "permalink": "https://www.reddit.com/r/ProgrammerHumor/",
            "image": "https://http.cat/204",
          }
          changed = update_readme(post)
          # Always succeed so transient API issues don't mark the job failed
          sys.exit(0)
          PY

      - name: Commit & push if changed
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add README.md
            git commit -m "chore(readme): auto-update ProgrammerHumor meme"
            git push
          else
            echo "No changes to commit."
          fi
